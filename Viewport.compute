
#pragma kernel Vanilla
#pragma kernel Rule

Texture2D<int> input;
RWTexture2D<float4> output;
RWStructuredBuffer<float> ruleColors;
int2 dims;
int flipVertical;

[numthreads(8,8,1)]
void Vanilla (uint3 id : SV_DispatchThreadID)
{
    int pixIn = input[id.xy];
    float4 pixOut = float4(0, 0, 0, 0);
    pixOut = (pixIn & 0xff) == 0 ? float4(0, 0, 0, 1) : float4(1, 1, 1, 1);
    int2 outputCoords = flipVertical == 0 ? int2(id.x, id.y) : int2(id.x, dims.y - id.y - 1);
    output[outputCoords.xy] = pixOut;
}

[numthreads(8,8,1)]
void Rule (uint3 id : SV_DispatchThreadID)
{
    int pixIn = input[id.xy];
    float4 pixOut = float4(0, 0, 0, 0);
    int colorVec = ((pixIn & 0xff00) >> 8);
    pixOut = float4(float(pixIn & 0xff000000), float(pixIn & 0xff0000), float(pixIn & 0xff00), float(pixIn & 0xff));
    //pixOut = float4((float)(pixIn & 0xff000000), (float)(pixIn & 0xff0000), (float)(pixIn & 0xff00), (float)(pixIn & 0xff));
    //pixOut = float4(ruleColors[colorVec], ruleColors[colorVec + 1], ruleColors[colorVec + 2], ruleColors[colorVec + 3]);
    int2 outputCoords = flipVertical == 0 ? int2(id.x, id.y) : int2(id.x, dims.y - id.y - 1);
    output[outputCoords.xy] = pixOut;
}
